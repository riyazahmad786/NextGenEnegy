// html.service.ts
import { Injectable } from '@angular/core';
import { ChartSeries } from '../../../../core/models/model';
import { AppStateService } from '../../../../shared/service/app-state.service';
import { ReportProcessor } from '../../helper/report-processor';
import { TableLayoutService } from '../../services/table-layout.service';

@Injectable({
  providedIn: 'root',
})
export class HtmlService {
  AppState: any;
  constructor(
    private tableLayoutService: TableLayoutService,
    private AppStateService: AppStateService // Inject AppStateService // Inject AppStateService
  ) {}

  generateHtml(
    data: ChartSeries[],
    Unit: string,
    reportProcessor: ReportProcessor,
    username: string,
    FTimezone: string
  ): string {
    reportProcessor.processData();

    //const timezone = this.AppStateService.getParameter(AppState.FTimezone);

    const maxColumnsPerSplit =
      this.tableLayoutService.calculateMaxColumnsPerSplit(
        reportProcessor.columns.length
      );
    const { columns, rows } = this.tableLayoutService.splitColumnsAndRows(
      reportProcessor.columns,
      reportProcessor.rows,
      maxColumnsPerSplit
    );
    const tableData = reportProcessor.tableData;

    if (!this.hasData(tableData)) {
      return '<p>No data available.</p>';
    }

    let html = '';

    columns.forEach((columnSet, index) => {
      html += '<div class="table-responsive">';
      html += '<table class="table table-striped table-hover" width="100%">';
      html += '<thead><tr><th>Name</th>';

      columnSet.forEach((column) => {
        html += `<th>${column}</th>`;
      });

      html += '</tr></thead><tbody>';

      for (const assetName of Object.keys(tableData)) {
        html += `<tr><td>${assetName}</td>`;
        rows[index].forEach((row) => {
          const value =
            tableData[assetName][row] !== undefined
              ? tableData[assetName][row]
              : 'N/A';
          html += `<td>${value}</td>`;
        });
        html += '</tr>';
      }

      html += '</tbody></table></div>';
    });

    const now = new Date();
    const formattedDate = this.formatDateByTimezone(now, FTimezone);
    const timeZoneAbbreviation = this.getTimeZoneAbbreviation(FTimezone);

    // Append footer
    // html += `<div class="footer" style="text-align: center;">
    //            <p>Generated by: ${username}</p>

    //            <p>Generated on: ${formattedDate} (${timeZoneAbbreviation})</p>
    //             <p> UnitType : ${Unit}</p>
    //          </div>`;
    // return html;
    html += `<div class="footer" style="text-align: center;">
               <p>Generated by: <strong>${username}</strong></p>
               <p>Generated on: <strong>${formattedDate}</strong> (<strong>${timeZoneAbbreviation}</strong>)</p>
               <p>* Note UnitType: <strong>${Unit}</strong></p>
             </div>`;
    return html;
  }

  generateComparisonHtml(
    conclusion: any[],
    reportName: string,
    type: string,
    unitType: string
  ): string {
    if (type === 'Yearly') return '';

    const intensityReports = [
      'Hourly Intensity Report',
      'Monthly Intensity Report',
      'Daily Intensity Report',
      'Yearly Intensity Report',
    ];

    const decimalPlaces = intensityReports.includes(reportName) ? 2 : 0;

    let htmlString = '<div class="row compar">';
    conclusion.forEach((item) => {
      htmlString += `
        <div class="col-md-3 col-sm-4">
          <div class="card-box widget-style1">
            <div class="d-flex flex-wrap item-center">
              <div class="row compar-total">
                <div class="titel-report"><span>${item.title}: </span>
                  ${item.totalValue.toFixed(decimalPlaces)}
                  <span class="titel-report-text">${unitType}</span>
                </div>
              </div>
              <div class="row compar">
                <div class="col text-lg-start">
                  <h6 class="text-sm-center">Min</h6>
                  <p>${item.minValue.toFixed(decimalPlaces)}</p>
                </div>
                <div class="col text-lg-center">
                  <h6 class="text-sm-center">Max</h6>
                  <p>${item.maxValue.toFixed(decimalPlaces)}</p>
                </div>
                <div class="col text-lg-end">
                  <h6 class="text-sm-center">Avg</h6>
                  <p>${item.averageValue.toFixed(decimalPlaces)}</p>
                </div>
              </div>
            </div>
          </div>
        </div>
      `;
    });
    htmlString += '</div>';
    return htmlString;
  }

  GenerateAgainstBudgetHtml(
    data: ChartSeries[],
    reportProcessor: ReportProcessor,
    username: string,
    unitType: string,
    periodStartDate: string, // Accept start date
    periodEndDate: string,
    FTimezone: string
  ): string {
    let html = '<div class="container">';
    html += ` <div class="row"> <div class="col-md-7">Â  <strong>Summary:</strong> </div>  <div class="col-md-5"> <strong>Period:</strong> ${periodStartDate} / ${periodEndDate} </div> </div>`;
    html += '<div class="table-responsive">';
    html += '<table class="table table-striped table-hover" width="100%">';
    html +=
      '<thead> <tr> <th>Building name</th> <th>Actual expense</th> <th>Target budget</th> <th>% Usage</th> </tr> </thead>';

    html += '</tr></thead><tbody>';
    html += '<tbody>';
    for (const item of data) {
      const percentColor = item.BudgetPercent > 90 ? 'red' : 'green';
      html += `<tr><td>${item.AssetName}</td>`;
      html += `<td>${item.value}</td>`;
      html += `<td>${item.TargetBudget}</td>`;
      html += `<td style="color: ${percentColor}">${item.BudgetPercent}</td>`;
      html += '</tr>';
    }

    html += '</tbody></table></div></div>';

    const now = new Date();
    const formattedDate = this.formatDateByTimezone(now, FTimezone);
    const timeZoneAbbreviation = this.getTimeZoneAbbreviation(FTimezone);

    // Append footer
    html += `<div class="footer" style="text-align: center;">
    <p>Generated by: <strong>${username}</strong></p>
    <p>Generated on: <strong>${formattedDate}</strong> (<strong>${timeZoneAbbreviation}</strong>)</p>
    <p>* Note UnitType: <strong>${unitType}</strong></p>
  </div>`;
    return html;
  }

  private hasData(data: any): boolean {
    return Object.keys(data).length > 0;
  }
  /**
   * Convert the current date to a specific timezone and format it.
   */
  private formatDateByTimezone(date: Date, windowsTimeZone: string): string {
    const ianaTimeZone = this.convertWindowsToIanaTimeZone(windowsTimeZone);

    return new Intl.DateTimeFormat('en-US', {
      timeZone: ianaTimeZone, // Use IANA format here
      year: 'numeric',
      month: 'long',
      day: '2-digit',
      hour: '2-digit',
      minute: '2-digit',
      second: '2-digit',
      hour12: true,
    }).format(date);
  }

  /**
   * Map Windows Time Zones to IANA Time Zones.
   */
  private convertWindowsToIanaTimeZone(windowsTimeZone: string): string {
    const timeZoneMap: { [key: string]: string } = {
      'Central Standard Time': 'America/Chicago',
      'Eastern Standard Time': 'America/New_York',
      'Pacific Standard Time': 'America/Los_Angeles',
      'Mountain Standard Time': 'America/Denver',
      'India Standard Time': 'Asia/Kolkata',
      'Greenwich Mean Time': 'Etc/GMT',
      'Atlantic Standard Time': 'America/Halifax',
      'Arabian Standard Time': 'Asia/Riyadh',
      'Alaskan Standard Time': 'America/Anchorage',
    };

    return timeZoneMap[windowsTimeZone] || 'UTC'; // Default to UTC if not found
  }
  // Returns the abbreviation for a given Windows time zone
  private getTimeZoneAbbreviation(windowsTimeZone: string): string {
    const timeZoneAbbreviations: { [key: string]: string } = {
      'Central Standard Time': 'CST',
      'Eastern Standard Time': 'EST',
      'Pacific Standard Time': 'PST',
      'Mountain Standard Time': 'MST',
      'India Standard Time': 'IST',
      'Greenwich Mean Time': 'GMT',
      'Atlantic Standard Time': 'AST',
      'Alaskan Standard Time': 'AKST',
    };

    return timeZoneAbbreviations[windowsTimeZone] || windowsTimeZone; // Return original if not found
  }
}
